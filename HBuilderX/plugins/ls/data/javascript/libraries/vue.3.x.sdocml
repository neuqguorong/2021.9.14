<?xml version="1.0" encoding="UTF-8"?>
<javascript website="https://vue3js.cn/docs/zh/api/">
	<aliases>
		<alias type="Class&lt;Vue&gt;" name="Vue"/>
	</aliases>
	<class type="PropsAttr">
		<properties>
			<property name="type" type="String">
			</property>
			<property name="default" type="String">
			</property>
			<property name="required" type="Boolean">
			</property>
			<property name="validator" type="Function">
			</property>
		</properties>
	</class>
	<class type="Config">
		<properties>
				<property name="errorHandler" type="Function(Error,Vue,String)" url="api/#errorHandler">
					<description>
						指定一个处理函数，来处理组件渲染方法执行期间以及侦听器抛出的未捕获错误。这个处理函数被调用时，可获取错误信息和应用实例。
					</description>
					<example>
<![CDATA[
<pre>
app.config.errorHandler = (err, vm, info) => {
  // 处理错误
  // `info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子
}
</pre>
]]>
					</example>
				</property>
				<property name="warnHandler" type="Function(String,Vue,Object)" url="api/#warnHandler">
					<description>
						为 Vue 的运行时警告指定一个自定义处理函数。注意这只会在开发环境下生效，在生产环境下它会被忽略。
					</description>
					<example>
<![CDATA[
<pre>
app.config.warnHandler = function(msg, vm, trace) {
  // `trace` 是组件的继承关系追踪
}
</pre>
]]>
					</example>
				</property>
				<property name="globalProperties" type="Map&lt;String,Any&gt;" url="api/# globalProperties">
					<description>
						添加可以在应用程序内的任何组件实例中访问的全局 property。属性名冲突时，组件的 property 将具有优先权。
					</description>
					<example>
<![CDATA[
<pre>
app.config.globalProperties.foo = 'bar'

app.component('child-component', {
  mounted() {
    console.log(this.foo) // 'bar'
  }
})
</pre>
]]>
					</example>
				</property>
				<property name="isCustomElement" type="Boolean" url="api/#isCustomElement">
					<description>
						指定一个方法，用来识别在 Vue 之外定义的自定义元素（例如，使用 Web Components API）。如果组件符合此条件，则不需要本地或全局注册，并且 Vue 不会抛出关于 Unknown custom element 的警告。
					</description>
					<example>
<![CDATA[
<pre>
// 任何以“ion-”开头的元素都将被识别为自定义元素
app.config.isCustomElement = tag => tag.startsWith('ion-')
</pre>
]]>
					</example>
				</property>
				<property name="optionMergeStrategies" type="Map&lt;String,Function&gt;" url="api/#optionMergeStrategies">
					<description>
						为自定义选项定义合并策略。
						合并策略选项分别接收在父实例和子实例上定义的该选项的值作为第一个和第二个参数，引用上下文实例被作为第三个参数传入。	
					</description>
					<example>
<![CDATA[
<pre>
const app = Vue.createApp({
  mounted() {
    console.log(this.$options.hello)
  }
})

app.config.optionMergeStrategies.hello = (parent, child, vm) => {
  return `Hello, ${child}`
}

app.mixin({
  hello: 'Vue'
})

// 'Hello, Vue
</pre>
]]>
					</example>
				</property>
				<property name="performance" type="Boolean" url="api/#performance">
					<description>
						设置为 true 以在浏览器开发工具的 performance/timeline 面板中启用对组件初始化、编译、渲染和更新的性能追踪。只适用于开发模式和支持 performance.mark API 的浏览器。
					</description>
				</property>
			</properties>
	</class>
	<class type="Vue" superclass="None">
		<constructors>
			<constructor>
				<parameters>
					<parameter name="options" type="ComponentOptions" />
				</parameters>
				<return-types>
					<return-type type="Vue"/>
				</return-types>
			</constructor>
		</constructors>
    <methods>
			<method name="reactive" url="basic-reactivity.html#reactive">
			  <parameters>
          <parameter name="target" type="Object" usage="required"/>
        </parameters>
				<return-types>
          <return-type type="Object"/>
        </return-types>
        <description>
					<![CDATA[
						返回对象的响应式副本
					]]>
				</description>
			</method>
			<method name="readonly" url="basic-reactivity.html#readonly">
			  <parameters>
          <parameter name="target" type="Object" usage="required"/>
        </parameters>
				<return-types>
          <return-type type="Object"/>
        </return-types>
        <description>
					<![CDATA[
						获取一个对象 (响应式或纯对象) 或 ref 并返回原始代理的只读代理。只读代理是深层的：访问的任何嵌套 property 也是只读的。
					]]>
				</description>
				<example>
<![CDATA[
<pre>
const original = reactive({ count: 0 })

const copy = readonly(original)

watchEffect(() => {
	// 适用于响应性追踪
	console.log(copy.count)
})

// 变更original 会触发侦听器依赖副本
original.count++

// 变更副本将失败并导致警告
copy.count++ // 警告!
</pre>
]]>
				</example>
			</method>
			<method name="isProxy" url="basic-reactivity.html#isproxy">
			  <parameters>
          <parameter name="target" type="Object" usage="required"/>
        </parameters>
				<return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>
					<![CDATA[
						检查对象是 reactive 还是 readonly创建的代理。
					]]>
				</description>
			</method>
			<method name="isReactive" url="basic-reactivity.html#isreactive">
			  <parameters>
          <parameter name="target" type="Object" usage="required"/>
        </parameters>
				<return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>
					<![CDATA[
						检查对象是否是 reactive创建的响应式 proxy。
					]]>
				</description>
			</method>
			<method name="isReadonly" url="basic-reactivity.html#isreadonly">
			  <parameters>
          <parameter name="target" type="Object" usage="required"/>
        </parameters>
				<return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>
					<![CDATA[
						检查对象是否是由readonly创建的只读代理。
					]]>
				</description>
			</method>
			<method name="toRaw" url="basic-reactivity.html#toraw">
			  <parameters>
          <parameter name="target" type="Object" usage="required"/>
        </parameters>
				<return-types>
          <return-type type="Object"/>
        </return-types>
        <description>
					<![CDATA[
						返回 reactive 或 readonly 代理的原始对象。
					]]>
				</description>
			</method>
			<method name="markRaw" url="basic-reactivity.html#markraw">
			  <parameters>
          <parameter name="target" type="Object" usage="required"/>
        </parameters>
				<return-types>
          <return-type type="Object"/>
        </return-types>
        <description>
					<![CDATA[
						标记一个对象，使其永远不会转换为代理。返回对象本身。
					]]>
				</description>
			</method>
			<method name="shallowReactive" url="basic-reactivity.html#shallowreactive">
			  <parameters>
          <parameter name="target" type="Object" usage="required"/>
        </parameters>
				<return-types>
          <return-type type="Object"/>
        </return-types>
        <description>
					<![CDATA[
						创建一个响应式代理，该代理跟踪其自身 property 的响应性，但不执行嵌套对象的深度响应式转换 (暴露原始值)。
					]]>
				</description>
			</method>
			<method name="shallowReadonly" url="basic-reactivity.html#shallowreadonly">
			  <parameters>
          <parameter name="target" type="Object" usage="required"/>
        </parameters>
				<return-types>
          <return-type type="Object"/>
        </return-types>
        <description>
					<![CDATA[
						创建一个代理，使其自身的 property 为只读，但不执行嵌套对象的深度只读转换 (暴露原始值)。
					]]>
				</description>
			</method>
			<method name="ref" url="refs-api.html#ref">
			  <parameters>
          <parameter name="target" type="Object" usage="required"/>
        </parameters>
				<return-types>
          <return-type type="Object"/>
        </return-types>
        <description>
					<![CDATA[
						接受一个内部值并返回一个响应式且可变的 ref 对象。ref 对象具有指向内部值的单个 property .value。
					]]>
				</description>
			</method>
			<method name="unref" url="refs-api.html#ref">
			  <parameters>
          <parameter name="target" type="Object" usage="required"/>
        </parameters>
				<return-types>
          <return-type type="Object"/>
        </return-types>
        <description>
					<![CDATA[
						如果参数为 ref，则返回内部值，否则返回参数本身。这是 val = isRef(val) ? val.value : val。
					]]>
				</description>
			</method>
			<method name="toRef" url="refs-api.html#toref">
			  <parameters>
          <parameter name="target" type="Object" usage="required"/>
        </parameters>
				<return-types>
          <return-type type="Object"/>
        </return-types>
        <description>
					<![CDATA[
						可以用来为源响应式对象上的 property 性创建一个 ref。然后可以将 ref 传递出去，从而保持对其源 property 的响应式连接。
					]]>
				</description>
			</method>
			<method name="toRefs" url="refs-api.html#torefs">
			  <parameters>
          <parameter name="target" type="Object" usage="required"/>
        </parameters>
				<return-types>
          <return-type type="Object"/>
        </return-types>
        <description>
					<![CDATA[
						将响应式对象转换为普通对象，其中结果对象的每个 property 都是指向原始对象相应 property 的ref。
					]]>
				</description>
			</method>
			<method name="isRef" url="refs-api.html#isref">
			  <parameters>
          <parameter name="target" type="Object" usage="required"/>
        </parameters>
				<return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>
					<![CDATA[
						检查对象是否是 ref 对象。
					]]>
				</description>
			</method>
			<method name="customRef" url="refs-api.html#customref">
			  <parameters>
          <parameter name="func" type="Function" usage="required"/>
        </parameters>
				<return-types>
          <return-type type="Object"/>
        </return-types>
        <description>
					<![CDATA[
						创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。它需要一个工厂函数，该函数接收 track 和 trigger 函数作为参数，并应返回一个带有 get 和 set 的对象。
					]]>
				</description>
			</method>
			<method name="shallowRef" url="refs-api.html#shallowref">
			  <parameters>
          <parameter name="target" type="Object" usage="required"/>
        </parameters>
				<return-types>
          <return-type type="Object"/>
        </return-types>
        <description>
					<![CDATA[
						创建一个 ref，它跟踪自己的 .value 更改，但不会使其值成为响应式的。
					]]>
				</description>
				<example>
<![CDATA[
<pre>
const foo = shallowRef({})
// 改变 ref 的值是响应式的
foo.value = {}
// 但是这个值不会被转换。
isReactive(foo.value) // false
</pre>
]]>
				</example>
			</method>
			<method name="triggerRef" url="refs-api.html#triggerref">
			  <parameters>
          <parameter name="target" type="Object" usage="required"/>
        </parameters>
				<return-types>
          <return-type type="Object"/>
        </return-types>
        <description>
					<![CDATA[
						手动执行与 shallowRef](#shallowref) 关联的任何效果。
					]]>
				</description>
				<example>
<![CDATA[
<pre>
const shallow = shallowRef({
	greet: 'Hello, world'
})

// 第一次运行时记录一次 "Hello, world"
watchEffect(() => {
	console.log(shallow.value.greet)
})

// 这不会触发作用，因为 ref 很浅层
shallow.value.greet = 'Hello, universe'

// 记录 "Hello, universe"
triggerRef(shallow)
</pre>
]]>
				</example>
			</method>
			<method name="computed" url="computed-watch-api.html#computed">
			  <parameters>
          <parameter name="getter" type="Function|Object" usage="required"/>
        </parameters>
				<return-types>
          <return-type type="Object"/>
        </return-types>
        <description>
					<![CDATA[
						使用 getter 函数，并为从 getter 返回的值返回一个不变的响应式 ref 对象。
					]]>
				</description>
				<example>
<![CDATA[
<pre>
const shallow = shallowRef({
	greet: 'Hello, world'
})

// 第一次运行时记录一次 "Hello, world"
watchEffect(() => {
	console.log(shallow.value.greet)
})

// 这不会触发作用，因为 ref 很浅层
shallow.value.greet = 'Hello, universe'

// 记录 "Hello, universe"
triggerRef(shallow)
</pre>
]]>
				</example>
			</method>
			<method name="watchEffect" url="computed-watch-api.html#watcheffect">
			  <parameters>
          <parameter name="target" type="Function" usage="required"/>
        </parameters>
        <description>
					<![CDATA[
						在响应式地跟踪其依赖项时立即运行一个函数，并在更改依赖项时重新运行它。
					]]>
				</description>
				<example>
<![CDATA[
<pre>
const count = ref(0)

watchEffect(() => console.log(count.value))
// -> logs 0

setTimeout(() => {
	count.value++
	// -> logs 1
}, 100)
</pre>
]]>
				</example>
			</method>
			<method name="watch" url="computed-watch-api.html#watch">
			  <parameters>
          <parameter name="target" type="Function" usage="required"/>
        </parameters>
        <description>
					<![CDATA[
						watch API 与选项式 API this.$watch (以及相应的 watch 选项) 完全等效。watch 需要侦听特定的 data 源，并在单独的回调函数中副作用。默认情况下，它也是惰性的——即，回调是仅在侦听源发生更改时调用。
					]]>
				</description>
			</method>
			<method name="setup" url="composition-api.html#setup">
			  <parameters>
          <parameter name="props" type="Object|LifeCycleFunction"/>
					<parameter name="context" type="SetupContext"/>
        </parameters>
				<return-types>
          <return-type type="Object"/>
        </return-types>
        <description>
					<![CDATA[
						一个组件选项，在创建组件之前执行，一旦 props 被解析，并作为组合式 API 的入口点
					]]>
				</description>
			</method>
			<method name="onBeforeMount" url="options-lifecycle-hooks.html#beforemount">
				<description>
					<![CDATA[
						在挂载开始之前被调用：相关的 render 函数首次被调用。该钩子在服务器端渲染期间不被调用。
					]]>
				</description>
			</method>
			<method name="onMounted" url="options-lifecycle-hooks.html#mounted">
				<description>
					<![CDATA[
					实例被挂载后调用，这时 Vue.createApp({}).mount() 被新创建的 vm.$el 替换了。如果根实例挂载到了一个文档内的元素上，当 mounted 被调用时 vm.$el 也在文档内。
					]]>
				</description>
				<remarks>
					<![CDATA[
						该钩子在服务器端渲染期间不被调用。
						注意mounted不会承诺所有的子组件也都一起被挂载。
					]]>
				</remarks>
			</method>
			<method name="onBeforeUpdate" url="options-lifecycle-hooks.html#beforeupdate">
				<description>
					<![CDATA[
						数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。
					]]>
				</description>
				<remarks>
					<![CDATA[
						该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。
					]]>
				</remarks>
			</method>
			<method name="onUpdated" url="options-lifecycle-hooks.html#updated">
				<description>
					<![CDATA[
						由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。
					]]>
				</description>
				<remarks>
					<![CDATA[
						该钩子在服务器端渲染期间不被调用。
					]]>
				</remarks>
			</method>
			<method name="onBeforeUnmount" url="options-lifecycle-hooks.html#beforeunmount">
				<description>
					<![CDATA[
						在卸载组件实例之前调用。在这个阶段，实例仍然是完全正常的。
					]]>
				</description>
				<remarks>
					<![CDATA[
						该钩子在服务器端渲染期间不被调用。
					]]>
				</remarks>
			</method>
			<method name="onUnmounted" url="options-lifecycle-hooks.html#unmounted">
				<description>
					<![CDATA[
						卸载组件实例后调用。调用此钩子时，组件实例的所有指令都被解除绑定，所有事件侦听器都被移除，所有子组件实例被卸载。
					]]>
				</description>
				<remarks>
					<![CDATA[
						该钩子在服务器端渲染期间不被调用。
					]]>
				</remarks>
			</method>
			<method name="onErrorCaptured" url="options-lifecycle-hooks.html#errorcaptured">
				<description>
					<![CDATA[
						当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。
					]]>
				</description>
				<remarks>
					<![CDATA[
						该钩子在服务器端渲染期间不被调用。
					]]>
				</remarks>
			</method>
			<method name="onRenderTracked" url="options-lifecycle-hooks.html#rendertracked">
				<description>
					<![CDATA[
						跟踪虚拟 DOM 重新渲染时调用。钩子接收 debugger event 作为参数。此事件告诉你哪个操作跟踪了组件以及该操作的目标对象和键。
					]]>
				</description>
			</method>
			<method name="onRenderTriggered" url="options-lifecycle-hooks.html#rendertriggered">
				<description>
					<![CDATA[
						当虚拟 DOM 重新渲染为 triggered.Similarly 为renderTracked，接收 debugger event 作为参数。此事件告诉你是什么操作触发了重新渲染，以及该操作的目标对象和键。
					]]>
				</description>
			</method>
			<method name="component" url="application-api.html#component">
			  <parameters>
          <parameter name="name" type="String"/>
					<parameter name="definition" type="Object|Function"/>
        </parameters>
        <return-types>
          <return-type type="Vue"/>
					<return-type type="Object"/>
        </return-types>
				<description>
					<![CDATA[
						注册或检索全局组件。注册还会使用给定的 name 参数自动设置组件的 name。
					]]>
				</description>
			</method>
			<method name="directive" url="application-api.html#directive">
				<parameters>
          <parameter name="name" type="String"/>
					<parameter name="definition" type="ComponentOptions|Function"/>
        </parameters>
        <return-types>
          <return-type type="Vue"/>
					<return-type type="Object"/>
        </return-types>
				<description>
					<![CDATA[
						注册或检索全局指令。
					]]>
				</description>
			</method>
			<method name="mixin" url="application-api.html#mixin">
				<parameters>
          <parameter name="mixin" type="Object"/>
        </parameters>
        <return-types>
          <return-type type="Vue"/>
        </return-types>
				<description>
					<![CDATA[
						在整个应用范围内应用混入。一旦注册，它们就可以在当前的应用中任何组件模板内使用它。插件作者可以使用此方法将自定义行为注入组件。不建议在应用代码中使用。
					]]>
				</description>
			</method>
			<method name="mount" url="application-api.html#mount">
				<parameters>
          <parameter name="rootContainer" type="String|Object|SelectorString"/>
        </parameters>
        <return-types>
          <return-type type="Vue"/>
        </return-types>
				<description>
					<![CDATA[
						将应用实例的根组件挂载在提供的 DOM 元素上。
					]]>
				</description>
			</method>
			<method name="provide" url="application-api.html#provide">
				<parameters>
          <parameter name="key" type="String|Object"/>
					<parameter name="value" type="Any"/>
        </parameters>
        <return-types>
          <return-type type="Vue"/>
        </return-types>
				<description>
					<![CDATA[
						设置一个可以被注入到应用范围内所有组件中的值。组件应该使用 inject 来接收提供的值。
						从 provide/inject 的角度来看，可以将应用程序视为根级别的祖先，而根组件是其唯一的子级。
					]]>
				</description>
			</method>
			<method name="inject" url="https://v3.vuejs.org/guide/composition-api-provide-inject.html#using-inject">
				<parameters>
          <parameter name="name " type="String"/>
					<parameter name="default" type="String"/>
        </parameters>
        <return-types>
          <return-type type="Vue"/>
        </return-types>
				<description>
					<![CDATA[
						设置一个可以被注入到应用范围内所有组件中的值。组件应该使用 inject 来接收提供的值。
						从 provide/inject 的角度来看，可以将应用程序视为根级别的祖先，而根组件是其唯一的子级。
					]]>
				</description>
			</method>
			<method name="unmount" url="application-api.html#unmount">
				<parameters>
          <parameter name="rootContainer" type="String|Object"/>
        </parameters>
        <return-types>
          <return-type type="Vue"/>
        </return-types>
				<description>
					<![CDATA[
						在提供的 DOM 元素上卸载应用实例的根组件。
					]]>
				</description>
			</method>
			<method name="use" url="application-api.html#use">
				<parameters>
          <parameter name="plugin" type="Function|Object"/>
					<parameter name="options" type="Array"/>
        </parameters>
        <return-types>
          <return-type type="Vue"/>
        </return-types>
				<description>
					<![CDATA[
						安装 Vue.js 插件。如果插件是一个对象，它必须暴露一个 install 方法。如果它本身是一个函数，它将被视为安装方法。
						该安装方法将以应用实例作为第一个参数被调用。传给 use 的其他 options 参数将作为后续参数传入该安装方法。
						当在同一个插件上多次调用此方法时，该插件将仅安装一次。
					]]>
				</description>
			</method>
      <method name="createApp" scope="static" url="global-api.html#createapp">
        <parameters>
          <parameter name="rootComponent" type="ComponentOptions"/>
					<parameter name="rootProps" type="Object"/>
        </parameters>
        <return-types>
          <return-type type="Vue"/>
        </return-types>
        <description>
					返回一个提供应用上下文的应用实例。应用实例挂载的整个组件树共享同一个上下文。
				</description>
      </method>
			<method name="h" scope="static" url="global-api.html#h">
        <parameters>
          <parameter name="type" type="String|Object|Function" usage="required"/>
					<parameter name="props" type="Object"/>
					<parameter name="children" type="String|Array|Object"/>
        </parameters>
        <return-types>
          <return-type type="VNode"/>
        </return-types>
        <description>
					返回一个“虚拟节点”，通常缩写为 VNode：一个普通对象，其中包含向 Vue 描述它应在页面上渲染哪种节点的信息，包括所有子节点的描述。它的目的是用于手动编写的渲染函数
				</description>
				<example>
<![CDATA[
<pre>
render() {
  return Vue.h('h1', {}, 'Some title')
}
</pre>
]]>
				</example>
      </method>
			<method name="defineComponent" scope="static" url="global-api.html#definecomponent">
        <parameters>
          <parameter name="rootComponent" type="Object|Function"/>
        </parameters>
        <return-types>
          <return-type type="Vue"/>
        </return-types>
        <description>
					从实现上看，defineComponent 只返回传递给它的对象。但是，就类型而言，返回的值有一个合成类型的构造函数，用于手动渲染函数、TSX 和 IDE 工具支持。
				</description>
      </method>
			<method name="defineAsyncComponent" scope="static" url="global-api.html#defineasynccomponent">
        <parameters>
          <parameter name="component" type="Function"/>
        </parameters>
        <return-types>
          <return-type type="Component"/>
        </return-types>
        <description>
					创建一个只有在需要时才会加载的异步组件。
				</description>
      </method>
			<method name="resolveComponent" scope="static" url="global-api.html#resolvecomponent">
        <parameters>
          <parameter name="name" type="String"/>
        </parameters>
        <return-types>
          <return-type type="Component"/>
        </return-types>
        <description>
					resolveComponent 只能在 render 或 setup 函数中使用。
					如果在当前应用实例中可用，则允许按名称解析 component。
					返回一个 Component。如果没有找到，则返回 undefined。
				</description>
				<example>
<![CDATA[
<pre>
import { resolveComponent } from 'vue'
render() {
  const MyComponent = resolveComponent('MyComponent')
}
</pre>
]]>
				</example>
      </method>
			<method name="resolveDynamicComponent" scope="static" url="global-api.html#resolvedynamiccomponent">
        <parameters>
          <parameter name="component" type="String|Object"/>
        </parameters>
        <return-types>
          <return-type type="Component"/>
        </return-types>
        <description>
					<![CDATA[
					resolveDynamicComponent 只能在 render 或 setup 函数中使用。
					允许使用与 <component :is=""> 相同的机制来解析一个 component。
					返回已解析的 Component 或新创建的 VNode，其中组件名称作为节点标签。如果找不到 Component，将发出警告。
					]]>
				</description>
				<example>
<![CDATA[
<pre>
import { resolveDynamicComponent } from 'vue'
render () {
  const MyComponent = resolveDynamicComponent('MyComponent')
}
</pre>
]]>
				</example>
      </method>
			<method name="resolveDirective" scope="static" url="global-api.html#resolvedirective">
        <parameters>
          <parameter name="name" type="String"/>
        </parameters>
        <return-types>
          <return-type type="Directive"/>
        </return-types>
        <description>
					resolveDirective 只能在 render 或 setup 函数中使用。
					如果在当前应用实例中可用，则允许通过其名称解析一个 directive。
					返回一个 Directive。如果没有找到，则返回 undefined。
				</description>
				<example>
<![CDATA[
<pre>
const app = Vue.createApp({})
app.directive('highlight', {})

import { resolveDirective } from 'vue'
render () {
  const highlightDirective = resolveDirective('highlight')
}
</pre>
]]>
				</example>
      </method>
			<method name="withDirectives" scope="static" url="global-api.html#withdirectives">
        <parameters>
          <parameter name="vnode" type="VNode"/>
					<parameter name="directives" type="Array"/>
        </parameters>
        <return-types>
          <return-type type="Directive"/>
        </return-types>
        <description>
					withDirectives 只能在 render 或 setup 函数中使用。
					允许将指令应用于 VNode。返回一个包含应用指令的 VNode。
				</description>
				<example>
<![CDATA[
<pre>
const app = Vue.createApp({})
app.directive('highlight', {})

import { resolveDirective } from 'vue'
render () {
  const highlightDirective = resolveDirective('highlight')
}
</pre>
]]>
				</example>
      </method>
			<method name="createRenderer" scope="static" url="global-api.html#createrenderer">
        <parameters>
          <parameter name="HostNode" type="Node"/>
					<parameter name="HostElement" type="Element"/>
        </parameters>
        <return-types>
          <return-type type="Directive"/>
        </return-types>
        <description>
					createRenderer 函数接受两个泛型参数： HostNode 和 HostElement，对应于宿主环境中的 Node 和 Element 类型。
					例如，对于 runtime-dom，HostNode 将是 DOM Node 接口，HostElement 将是 DOM Element 接口。
				</description>
				<example>
<![CDATA[
<pre>
import { createRenderer } from 'vue'
const { render, createApp } = createRenderer<Node, Element>({
  patchProp,
  ...nodeOps
})
</pre>
]]>
				</example>
      </method>
			<method name="nextTick" scope="static" url="global-api.html#nexttick">
        <description>
				<![CDATA[
					将回调推迟到下一个 DOM 更新周期之后执行。在更改了一些数据以等待 DOM 更新后立即使用它。
				]]>	
				</description>
				<example>
<![CDATA[
<pre>
import { createApp, nextTick } from 'vue'

const app = createApp({
  setup() {
    const message = ref('Hello!')
    const changeMessage = async newMessage => {
      message.value = newMessage
      await nextTick()
      console.log('Now DOM is updated')
    }
  }
})
</pre>
]]>
				</example>
      </method>
			<method name="$watch" url="instance-methods.html#watch">
				<description>
					<![CDATA[
						侦听组件实例上的响应式 property 或函数计算结果的变化。回调函数得到的参数为新值和旧值。我们只能将顶层的 data、prop 或 computed property 名作为字符串传递。对于更复杂的表达式，用一个函数取代。
					]]>
				</description>
				<example>
<![CDATA[
<pre>		
const app = Vue.createApp({
	data() {
		return {
			a: 1,
			b: 2,
			c: {
				d: 3,
				e: 4
			}
		}
	},
	created() {
		// 顶层property 名
		this.$watch('a', (newVal, oldVal) => {
		// 做点什么
	})

	// 用于监视单个嵌套property 的函数
	this.$watch(
		() => this.c.d,
		(newVal, oldVal) => {
			// 做点什么
		}
	)

	// 用于监视复杂表达式的函数
	this.$watch(
		// 表达式 `this.a + this.b` 每次得出一个不同的结果时
		// 处理函数都会被调用。
		// 这就像监听一个未被定义的计算属性
		() => this.a + this.b,
			(newVal, oldVal) => {
				// 做点什么
			}
		)
	}
})
</pre>
]]>
				</example>
				<parameters>
					<parameter name="source" type="String|VueDataString|Function" usage="required"/>
					<parameter name="callback" type="Function(Vue,Object)|Object" usage="required"/>
					<parameter name="options" type="WatchOptions"/>
				</parameters>
				<return-types>
					<return-type type="Function"/>
				</return-types>
			</method>
			<method name="$emit" url="instance-methods.html#emit">
				<description>
					<![CDATA[
						触发当前实例上的事件。附加参数都会传给监听器回调。
					]]>
				</description>
				<parameters>
					<parameter name="event" type="String|VueEventString" usage="required"/>
					<parameter name="args" type="Object[]" />
				</parameters>
				<return-types>
					<return-type type="Vue"/>
				</return-types>
			</method>
			<method name="$forceUpdate" url="instance-methods.html#forceupdate">
				<description>
					<![CDATA[
						迫使 Vue 实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。
					]]>
				</description>
			</method>
			<method name="$nextTick" url="instance-methods.html#nexttick">
				<description>
					<![CDATA[
						将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 nextTick 一样，不同的是回调的 this 自动绑定到调用它的实例上。
					]]>
				</description>
				<example>
<![CDATA[
<pre>
Vue.createApp({
  // ...
  methods: {
  // ...
  example() {
    // modify data
    this.message = 'changed'
    // DOM is not updated yet
    this.$nextTick(function() {
      // DOM is now updated
      // `this` is bound to the current instance
      this.doSomethingElse()
    })
   }
  }
})
</pre>
]]>
				</example>
				<parameters>
					<parameter name="callback" type="Function(Vue)" usage="required"/>
				</parameters>
			</method>
		</methods>
		<properties>
			<property name="config" type="Config" url="application-api.html#config">
				<description>
					<![CDATA[
						包含应用配置的对象。
					]]>
				</description>
				<example>
<![CDATA[
<pre>
import { createApp } from 'vue'
const app = createApp({})

app.config = {...}
</pre>
]]>
				</example>
			</property>
			<property name="$data" type="Object" url="instance-properties.html#data">
				<description>
					<![CDATA[
						Vue 实例观察的数据对象。Vue 实例代理了对其 data 对象属性的访问。
					]]>
				</description>
			</property>
			<property name="$props" type="Object" url="instance-properties.html#props">
				<description>
					<![CDATA[
						当前组件接收到的 props 对象。组件实例代理了对其 props 对象 property 的访问。
					]]>
				</description>
			</property>
			<property name="$el" type="HTMLElement" url="instance-properties.html#el">
				<description>
					<![CDATA[
						Vue 实例使用的根 DOM 元素。
					]]>
				</description>
			</property>
			<property name="$options" type="ComponentOptions" url="instance-properties.html#options">
				<description>
					<![CDATA[
						用于当前 Vue 实例的初始化选项。
					]]>
				</description>
				<example>
<![CDATA[
<pre>
const app = Vue.createApp({
  customOption: 'foo',
  created() {
    console.log(this.$options.customOption) // => 'foo'
  }
})
</pre>
]]>
				</example>
			</property>
			<property name="$parent" type="Vue" url="instance-properties.html#parent">
				<description>
					<![CDATA[
						父实例，如果当前实例有的话。
					]]>
				</description>
			</property>
			<property name="$root" type="Vue" url="instance-properties.html#root">
				<description>
					<![CDATA[
						当前组件树的根 Vue 实例。如果当前实例没有父实例，此实例将会是其自己。
					]]>
				</description>
			</property>
			<property name="$slots" type="VNode[]" url="instance-properties.html#slots">
				<description>
					<![CDATA[
						用来访问被插槽分发的内容。每个具名插槽 有其相应的属性 (例如：slot="foo" 中的内容将会在 vm.$slots.foo 中被找到)。default 属性包括了所有没有被包含在具名插槽中的节点。
					]]>
				</description>
				<example>
<![CDATA[
<pre>
const app = Vue.createApp({})

app.component('blog-post', {
  render() {
    return Vue.h('div', [
      Vue.h('header', this.$slots.header()),
      Vue.h('main', this.$slots.default()),
      Vue.h('footer', this.$slots.footer())
   ])
  }
})
</pre>
]]>
				</example>
			</property>
			<property name="$refs" type="Vue[]|Vue|Element[]|Element" url="instance-properties.html#refs">
				<description>
					<![CDATA[
						一个对象，持有注册过 ref 特性 的所有 DOM 元素和组件实例。
					]]>
				</description>
			</property>
			<property name="$attrs" type="Object" url="instance-properties.html#attrs">
				<description>
					<![CDATA[
						包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind="$attrs" 传入内部组件——在创建高级别的组件时非常有用。
					]]>
				</description>
			</property>
		</properties>
	</class>
	<class type="ComponentOptions">
		<methods>
			<method name="setup" url="composition-api.html#setup">
			  <parameters>
          <parameter name="props" type="Object|LifeCycleFunction"/>
					<parameter name="context" type="SetupContext"/>
        </parameters>
				<return-types>
          <return-type type="Object"/>
        </return-types>
        <description>
					<![CDATA[
						一个组件选项，在创建组件之前执行，一旦 props 被解析，并作为组合式 API 的入口点
					]]>
				</description>
			</method>
		</methods>
			<properties>
				<property name="data" type="Function" url="options-data.html#data-2">
					<description>
						<![CDATA[
							返回组件实例的 data 对象的函数。
						]]>
					</description>
					<example>
<![CDATA[
<pre>
// 直接创建一个实例
const data = { a: 1 }

// 这个对象将添加到组件实例中
const vm = Vue.createApp({
  data() {
    return data
  }
}).mount('#app')

console.log(vm.a) // => 1
</pre>
]]>
					</example>
				</property>
				<property name="props" type="String[]|Map&lt;String,PropsAttr&gt;|Object" url="options-data.html#props">
					<description>
						<![CDATA[
							props 可以是数组或对象，用于接收来自父组件的数据。props 可以是简单的数组，或者使用对象作为替代，对象允许配置高级选项，如类型检测、自定义校验和设置默认值。
						]]>
					</description>
					<example>
<![CDATA[
<pre>
const app = Vue.createApp({})

// 简单语法
app.component('props-demo-simple', {
  props: ['size', 'myMessage']
})

// 对象语法，提供验证
app.component('props-demo-advanced', {
  props: {
    // 类型检查
    height: Number,
    // 类型检查 + 其他验证
    age: {
    type: Number,
      default: 0,
      required: true,
      validator: value => {
        return value >= 0
      }
    }
  }
})
</pre>
]]>
					</example>
				</property>
				<property name="computed" type="Object" url="options-data.html#computed">
					<description>
						<![CDATA[
							计算属性将被混入到 Vue 实例中。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例。
						]]>
					</description>
					<example>
<![CDATA[
<pre>
const app = Vue.createApp({
  data() {
    return { a: 1 }
  },
  computed: {
    // 仅读取
    aDouble() {
      return this.a * 2
    },
    // 读取和设置
    aPlus: {
      get() {
        return this.a + 1
      },
      set(v) {
        this.a = v - 1
      }
    }
  }
})

const vm = app.mount('#app')
console.log(vm.aPlus) // => 2
vm.aPlus = 3
console.log(vm.a) // => 2
console.log(vm.aDouble) // => 4
</pre>
]]>
					</example>
				</property>
				<property name="methods" type="Object" url="options-data.html#methods">
					<description>
						<![CDATA[
							methods 将被混入到 Vue 实例中。可以直接通过 VM 实例访问这些方法，或者在指令表达式中使用。方法中的 this 自动绑定为 Vue 实例。
						]]>
					</description>
					<remarks>
						<![CDATA[
							注意，不应该使用箭头函数来定义 method 函数 (例如 plus: () => this.a++)。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.a 将是 undefined。
						]]>
					</remarks>
					<example>
<![CDATA[
<pre>
const app = Vue.createApp({
  data() {
    return { a: 1 }
  },
  methods: {
    plus() {
      this.a++
    }
  }
})

const vm = app.mount('#app')

vm.plus()
console.log(vm.a) // => 2
</pre>
]]>
					</example>
				</property>
				<property name="watch" type="Object" url="options-data.html#watch">
					<description>
						<![CDATA[
							一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()，遍历 watch 对象的每一个属性。
						]]>
					</description>
					<remarks>
						<![CDATA[
							注意，不应该使用箭头函数来定义 watcher 函数 (例如 searchQuery: newValue => this.updateAutocomplete(newValue))。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.updateAutocomplete 将是 undefined。
						]]>
					</remarks>
					<example>
<![CDATA[
<pre>
const app = Vue.createApp({
data() {
  return {
    a: 1,
    b: 2,
    c: {
      d: 4
    },
    e: 'test',
    f: 5
  }
},
watch: {
  a(val, oldVal) {
    console.log(`new: ${val}, old: ${oldVal}`)
  },
  // 字符串方法名
  b: 'someMethod',
  // 该回调会在任何被侦听的对象的 property 改变时被调用，不论其被嵌套多深
  c: {
    handler(val, oldVal) {
      console.log('c changed')
    },
    deep: true
  },
  // 该回调将会在侦听开始之后被立即调用
  e: {
    handler(val, oldVal) {
      console.log('e changed')
    },
    immediate: true
  },
  // 你可以传入回调数组，它们会被逐一调用
  f: [
    'handle1',
    function handle2(val, oldVal) {
      console.log('handle2 triggered')
    },
    {
      handler: function handle3(val, oldVal) {
      console.log('handle3 triggered')
    }
    /* ... */
    }
  ]
},
methods: {
  someMethod() {
    console.log('b changed')
  },
  handle1() {
    console.log('handle 1 triggered')
  }
}
})

const vm = app.mount('#app')

vm.a = 3 // => new: 3, old: 1
</pre>
]]>
					</example>
				</property>
				<property name="emits" type="String[]|Object" url="options-data.html#emits">
					<description>
						<![CDATA[
							emits 可以是数组或对象，从组件触发自定义事件，emits 可以是简单的数组，或者对象作为替代，允许配置和事件验证。
						]]>
					</description>
					<remarks>
						<![CDATA[
							emits 选项中列出的事件不会从组件的根元素继承，也将从 $attrs property 中移除。
						]]>
					</remarks>
					<example>
<![CDATA[
<pre>
const app = Vue.createApp({})

// 数组语法
app.component('todo-item', {
  emits: ['check'],
  created() {
    this.$emit('check')
  }
})

// 对象语法
app.component('reply-form', {
  emits: {
    // 没有验证函数
    click: null,

    // 带有验证函数
    submit: payload => {
      if (payload.email && payload.password) {
        return true
      } else {
        console.warn(`Invalid submit event payload!`)
        return false
      }
    }
  }
})
</pre>
]]>
					</example>
				</property>
				<property name="template" type="HTMLString" url="options-dom.html#template">
					<description>
						<![CDATA[
							一个字符串模板作为 Vue 实例的标识使用。模板将会替换挂载的元素。挂载元素的内容都将被忽略，除非模板的内容有分发插槽。
						]]>
					</description>
					<remarks>
						<![CDATA[
							如果 Vue 选项中包含渲染函数，该模板将被忽略。
						]]>
					</remarks>
				</property>
				<property name="render" type="Function" url="options-dom.html#render">
					<description>
						<![CDATA[
							字符串模板的另一种选择，允许你充分利用 JavaScript 的编程功能。
						]]>
					</description>
					<remarks>
						<![CDATA[
							render 函数的优先级高于从挂载元素 template 选项或内置 DOM 提取出的 HTML 模板编译渲染函数。
						]]>
					</remarks>
				</property>
				<property name="beforeCreate" type="Function" url="options-lifecycle-hooks.html#beforecreate">
					<description>
						<![CDATA[
							在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。
						]]>
					</description>
				</property>
				<property name="created" type="Function" url="options-lifecycle-hooks.html#created">
					<description>
						<![CDATA[
							在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，property 和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el property 目前尚不可用。
						]]>
					</description>
				</property>
				<property name="beforeMount" type="Function" url="options-lifecycle-hooks.html#beforemount">
					<description>
						<![CDATA[
							在挂载开始之前被调用：相关的 render 函数首次被调用。该钩子在服务器端渲染期间不被调用。
						]]>
					</description>
				</property>
				<property name="mounted" type="Function" url="options-lifecycle-hooks.html#mounted">
					<description>
						<![CDATA[
						实例被挂载后调用，这时 Vue.createApp({}).mount() 被新创建的 vm.$el 替换了。如果根实例挂载到了一个文档内的元素上，当 mounted 被调用时 vm.$el 也在文档内。
						]]>
					</description>
					<remarks>
						<![CDATA[
							该钩子在服务器端渲染期间不被调用。
							注意mounted不会承诺所有的子组件也都一起被挂载。
						]]>
					</remarks>
					<example>
<![CDATA[
<pre>
//如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted：

mounted() {
  this.$nextTick(function () {
    // 仅在渲染整个视图之后运行的代码
  })
}
</pre>
]]>
					</example>
				</property>
				<property name="beforeUpdate" type="Function" url="options-lifecycle-hooks.html#beforeupdate">
					<description>
						<![CDATA[
							数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。
						]]>
					</description>
					<remarks>
						<![CDATA[
							该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。
						]]>
					</remarks>
				</property>
				<property name="updated" type="Function" url="options-lifecycle-hooks.html#updated">
					<description>
						<![CDATA[
							由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。
						]]>
					</description>
					<remarks>
						<![CDATA[
							该钩子在服务器端渲染期间不被调用。
						]]>
					</remarks>
				</property>
				<property name="activated" type="Function" url="options-lifecycle-hooks.html#activated">
					<description>
						<![CDATA[
							被 keep-alive 缓存的组件激活时调用。
						]]>
					</description>
					<remarks>
						<![CDATA[
							该钩子在服务器端渲染期间不被调用。
						]]>
					</remarks>
				</property>
				<property name="deactivated" type="Function" url="options-lifecycle-hooks.html#deactivated">
					<description>
						<![CDATA[
							被 keep-alive 缓存的组件停用时调用。
						]]>
					</description>
					<remarks>
						<![CDATA[
							该钩子在服务器端渲染期间不被调用。
						]]>
					</remarks>
				</property>
				<property name="beforeUnmount" type="Function" url="options-lifecycle-hooks.html#beforeunmount">
					<description>
						<![CDATA[
							在卸载组件实例之前调用。在这个阶段，实例仍然是完全正常的。
						]]>
					</description>
					<remarks>
						<![CDATA[
							该钩子在服务器端渲染期间不被调用。
						]]>
					</remarks>
				</property>
				<property name="unmounted" type="Function" url="options-lifecycle-hooks.html#unmounted">
					<description>
						<![CDATA[
							卸载组件实例后调用。调用此钩子时，组件实例的所有指令都被解除绑定，所有事件侦听器都被移除，所有子组件实例被卸载。
						]]>
					</description>
					<remarks>
						<![CDATA[
							该钩子在服务器端渲染期间不被调用。
						]]>
					</remarks>
				</property>
				<property name="errorCaptured" type="Function" url="options-lifecycle-hooks.html#errorcaptured">
					<description>
						<![CDATA[
							当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。
						]]>
					</description>
					<remarks>
						<![CDATA[
							该钩子在服务器端渲染期间不被调用。
						]]>
					</remarks>
				</property>
				<property name="renderTracked" type="Function" url="options-lifecycle-hooks.html#rendertracked">
					<description>
						<![CDATA[
							跟踪虚拟 DOM 重新渲染时调用。钩子接收 debugger event 作为参数。此事件告诉你哪个操作跟踪了组件以及该操作的目标对象和键。
						]]>
					</description>
				</property>
				<property name="renderTriggered" type="Function" url="options-lifecycle-hooks.html#rendertriggered">
					<description>
						<![CDATA[
							当虚拟 DOM 重新渲染为 triggered.Similarly 为renderTracked，接收 debugger event 作为参数。此事件告诉你是什么操作触发了重新渲染，以及该操作的目标对象和键。
						]]>
					</description>
				</property>
				<property name="directives" type="Object" url="options-assets.html#directives">
					<description>
						<![CDATA[
							包含组件实例可用指令的哈希表。
						]]>
					</description>
				</property>
				<property name="components" type="Map&lt;String,ComponentOptions&gt;|Component" url="options-assets.html#directives">
					<description>
						<![CDATA[
							包含组件实例可用组件的哈希表。
						]]>
					</description>
				</property>
				<property name="mixins" type="ComponentOptions" url="options-composition.html#mixins">
					<description>
						<![CDATA[
							mixins 选项接受一个混入对象的数组。这些混入实例对象可以像正常的实例对象一样包含选项，他们将在 Vue.extend() 里最终选择使用相同的选项合并逻辑合并。举例：如果你的混入包含一个钩子而创建组件本身也有一个，两个函数将被调用。Mixin 钩子按照传入顺序依次调用，并在调用组件自身的钩子之前被调用。
						]]>
					</description>
					<example>
<![CDATA[
<pre>
const mixin = {
  created: function() {
    console.log(1)
  }
}

Vue.createApp({
  created() {
    console.log(2)
  },
  mixins: [mixin]
})

// => 1
// => 2
</pre>
]]>
					</example>
				</property>
				<property name="extends" type="Object|Function" url="options-composition.html#extends">
					<description>
						<![CDATA[
							允许声明扩展另一个组件 (可以是一个简单的选项对象或构造函数)。这主要是为了便于扩展单文件组件。
							这和 mixins 类似。
						]]>
					</description>
<example>
<![CDATA[
<pre>
const CompA = { ... }

// 在没有调用 `Vue.extend` 时候继承 CompA
const CompB = {
  extends: CompA,
  ...
}
</pre>
]]>
					</example>
				</property>
				<property name="provide" type="Object" url="options-composition.html#provide-inject">
					<description>
						<![CDATA[
							需要和inject一起使用
						]]>
					</description>
					<remarks>
						<![CDATA[
							provide 和 inject 主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中。
						]]>
					</remarks>
				</property>
				<property name="inject" type="Object" url="options-composition.html#provide-inject">
					<description>
						<![CDATA[
							需要和provide一起使用。provide 选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的 property。在该对象中你可以使用 ES2015 Symbols 作为 key，但是只在原生支持 Symbol 和 Reflect.ownKeys 的环境下可工作。
						]]>
					</description>
					<remarks>
						<![CDATA[
							provide 和 inject 主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中。
						]]>
					</remarks>
				</property>
				<property name="name" type="String" url="options-misc.html#name">
					<description>
						<![CDATA[
							允许组件模板递归地调用自身。注意，组件在全局用 Vue.createApp({}).component({}) 注册时，全局 ID 自动作为组件的 name。
						]]>
					</description>
				</property>
				<property name="delimiters" type="String[]" url="options-misc.html#delimiters">
					<description>
						<![CDATA[
							改变纯文本插入分隔符。
						]]>
					</description>
					<example>
<![CDATA[
<pre>
Vue.createApp({
  // Delimiters changed to ES6 template string style
  delimiters: ['${', '}']
})
</pre>	
]]>
					</example>
				</property>
				<property name="inheritAttrs" type="Boolean" url="options-misc.html#inheritattrs">
					<description>
						<![CDATA[
							默认情况下父作用域的不被认作 props 的 attribute 绑定 (attribute bindings) 将会“回退”且作为普通的 HTML attribute 应用在子组件的根元素上。当撰写包裹一个目标元素或另一个组件的组件时，这可能不会总是符合预期行为。通过设置 inheritAttrs 到 false，这些默认行为将会被去掉。而通过实例 property $attrs 可以让这些 attribute 生效，且可以通过 v-bind 显性的绑定到非根元素上。
						]]>
					</description>
					<remarks>
						<![CDATA[
							<pre>
								app.component('base-input', {
								inheritAttrs: false,
								props: ['label', 'value'],
								emits: ['input'],
								template: `
									<label>
										{{ label }}
										<input
											v-bind="$attrs"
											v-bind:value="value"
											v-on:input="$emit('input', $event.target.value)"
										>
									</label>
								`
								})
							</pre>	
						]]>
					</remarks>
				</property>
			</properties>
	</class>
	<class type="LifeCycleFunction">
		<properties>
			<property name="onBeforeMount" type="Function" url="options-lifecycle-hooks.html#beforemount">
				<description>
					<![CDATA[
						在挂载开始之前被调用：相关的 render 函数首次被调用。该钩子在服务器端渲染期间不被调用。
					]]>
				</description>
			</property>
			<property name="onMounted" type="Function" url="options-lifecycle-hooks.html#mounted">
				<description>
					<![CDATA[
					实例被挂载后调用，这时 Vue.createApp({}).mount() 被新创建的 vm.$el 替换了。如果根实例挂载到了一个文档内的元素上，当 mounted 被调用时 vm.$el 也在文档内。
					]]>
				</description>
				<remarks>
					<![CDATA[
						该钩子在服务器端渲染期间不被调用。
						注意mounted不会承诺所有的子组件也都一起被挂载。
					]]>
				</remarks>
			</property>
			<property name="onBeforeUpdate" type="Function" url="options-lifecycle-hooks.html#beforeupdate">
				<description>
					<![CDATA[
						数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。
					]]>
				</description>
				<remarks>
					<![CDATA[
						该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。
					]]>
				</remarks>
			</property>
			<property name="onUpdated" type="Function" url="options-lifecycle-hooks.html#updated">
				<description>
					<![CDATA[
						由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。
					]]>
				</description>
				<remarks>
					<![CDATA[
						该钩子在服务器端渲染期间不被调用。
					]]>
				</remarks>
			</property>
			<property name="onBeforeUnmount" type="Function" url="options-lifecycle-hooks.html#beforeunmount">
				<description>
					<![CDATA[
						在卸载组件实例之前调用。在这个阶段，实例仍然是完全正常的。
					]]>
				</description>
				<remarks>
					<![CDATA[
						该钩子在服务器端渲染期间不被调用。
					]]>
				</remarks>
			</property>
			<property name="onUnmounted" type="Function" url="options-lifecycle-hooks.html#unmounted">
				<description>
					<![CDATA[
						卸载组件实例后调用。调用此钩子时，组件实例的所有指令都被解除绑定，所有事件侦听器都被移除，所有子组件实例被卸载。
					]]>
				</description>
				<remarks>
					<![CDATA[
						该钩子在服务器端渲染期间不被调用。
					]]>
				</remarks>
			</property>
			<property name="onErrorCaptured" type="Function" url="options-lifecycle-hooks.html#errorcaptured">
				<description>
					<![CDATA[
						当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。
					]]>
				</description>
				<remarks>
					<![CDATA[
						该钩子在服务器端渲染期间不被调用。
					]]>
				</remarks>
			</property>
			<property name="onRenderTracked" type="Function" url="options-lifecycle-hooks.html#rendertracked">
				<description>
					<![CDATA[
						跟踪虚拟 DOM 重新渲染时调用。钩子接收 debugger event 作为参数。此事件告诉你哪个操作跟踪了组件以及该操作的目标对象和键。
					]]>
				</description>
			</property>
			<property name="onRenderTriggered" type="Function" url="options-lifecycle-hooks.html#rendertriggered">
				<description>
					<![CDATA[
						当虚拟 DOM 重新渲染为 triggered.Similarly 为renderTracked，接收 debugger event 作为参数。此事件告诉你是什么操作触发了重新渲染，以及该操作的目标对象和键。
					]]>
				</description>
			</property>
		</properties>
	</class>
	<class type="SetupContext">
		<properties>
			<property name="attrs" type="Object">
				<description>
					<![CDATA[
						在挂载开始之前被调用：相关的 render 函数首次被调用。该钩子在服务器端渲染期间不被调用。
					]]>
				</description>
			</property>
			<property name="slots" type="Function">
				<description>
					<![CDATA[
					实例被挂载后调用，这时 Vue.createApp({}).mount() 被新创建的 vm.$el 替换了。如果根实例挂载到了一个文档内的元素上，当 mounted 被调用时 vm.$el 也在文档内。
					]]>
				</description>
				<remarks>
					<![CDATA[
						该钩子在服务器端渲染期间不被调用。
						注意mounted不会承诺所有的子组件也都一起被挂载。
					]]>
				</remarks>
			</property>
		</properties>
		<methods>
			<method name="emit">
				<parameters>
					<parameter name="event" type="String"/>
					<parameter name="args" type="Array"/>
				</parameters>
				<return-types>
					<return-type type="void"/>
				</return-types>
			</method>
		</methods>
	</class>
</javascript>
